// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package glumberjack

import (
	"errors"
	"fmt"
)

const (
	// CompressionTypeGzip is a CompressionType of type Gzip.
	CompressionTypeGzip CompressionType = iota
)

var ErrInvalidCompressionType = errors.New("not a valid CompressionType")

const _CompressionTypeName = "gzip"

var _CompressionTypeMap = map[CompressionType]string{
	CompressionTypeGzip: _CompressionTypeName[0:4],
}

// String implements the Stringer interface.
func (x CompressionType) String() string {
	if str, ok := _CompressionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CompressionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CompressionType) IsValid() bool {
	_, ok := _CompressionTypeMap[x]
	return ok
}

var _CompressionTypeValue = map[string]CompressionType{
	_CompressionTypeName[0:4]: CompressionTypeGzip,
}

// ParseCompressionType attempts to convert a string to a CompressionType.
func ParseCompressionType(name string) (CompressionType, error) {
	if x, ok := _CompressionTypeValue[name]; ok {
		return x, nil
	}
	return CompressionType(0), fmt.Errorf("%s is %w", name, ErrInvalidCompressionType)
}
